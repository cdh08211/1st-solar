{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import keras\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>temperature</th>\n",
       "      <th>land temperature</th>\n",
       "      <th>bright sunshine</th>\n",
       "      <th>humidity</th>\n",
       "      <th>wind speed</th>\n",
       "      <th>solar energy production</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>25.8</td>\n",
       "      <td>24.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>25.6</td>\n",
       "      <td>24.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>25.5</td>\n",
       "      <td>24.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>25.1</td>\n",
       "      <td>24.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>23.9</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month  day  time  temperature  land temperature  bright sunshine  \\\n",
       "0  2017      7    1     0         25.8              24.7              0.0   \n",
       "1  2017      7    1     1         25.6              24.4              0.0   \n",
       "2  2017      7    1     2         25.5              24.3              0.0   \n",
       "3  2017      7    1     3         25.1              24.2              0.0   \n",
       "4  2017      7    1     4         23.9              24.0              0.0   \n",
       "\n",
       "   humidity  wind speed  solar energy production  \n",
       "0        84         1.2                      0.0  \n",
       "1        84         2.0                      0.0  \n",
       "2        84         2.1                      0.0  \n",
       "3        86         0.4                      0.0  \n",
       "4        90         1.3                      0.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('c:/jupyter/data2.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(columns=['solar energy production', 'year', 'land temperature', 'bright sunshine'])\n",
    "y = df[['land temperature']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.Sequential()\n",
    "model.add(keras.layers.Dense(6, activation='relu', input_shape=(6,)))\n",
    "model.add(keras.layers.Dense(100, activation='relu'))\n",
    "model.add(keras.layers.Dense(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam', loss='mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/60\n",
      "17520/17520 [==============================] - 2s 114us/step - loss: 33.0156\n",
      "Epoch 2/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 12.1640\n",
      "Epoch 3/60\n",
      "17520/17520 [==============================] - 1s 65us/step - loss: 11.4682\n",
      "Epoch 4/60\n",
      "17520/17520 [==============================] - 1s 54us/step - loss: 11.1837\n",
      "Epoch 5/60\n",
      "17520/17520 [==============================] - 1s 47us/step - loss: 11.1465\n",
      "Epoch 6/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 10.9554\n",
      "Epoch 7/60\n",
      "17520/17520 [==============================] - 1s 44us/step - loss: 10.7491\n",
      "Epoch 8/60\n",
      "17520/17520 [==============================] - 1s 47us/step - loss: 10.7416\n",
      "Epoch 9/60\n",
      "17520/17520 [==============================] - 1s 58us/step - loss: 10.5773\n",
      "Epoch 10/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 10.4202\n",
      "Epoch 11/60\n",
      "17520/17520 [==============================] - 1s 58us/step - loss: 10.3148\n",
      "Epoch 12/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 10.2175\n",
      "Epoch 13/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 10.0409\n",
      "Epoch 14/60\n",
      "17520/17520 [==============================] - 1s 63us/step - loss: 9.6864\n",
      "Epoch 15/60\n",
      "17520/17520 [==============================] - 1s 64us/step - loss: 9.4925\n",
      "Epoch 16/60\n",
      "17520/17520 [==============================] - 1s 64us/step - loss: 9.2601\n",
      "Epoch 17/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 8.9988\n",
      "Epoch 18/60\n",
      "17520/17520 [==============================] - 1s 64us/step - loss: 8.8115\n",
      "Epoch 19/60\n",
      "17520/17520 [==============================] - 1s 61us/step - loss: 8.7051\n",
      "Epoch 20/60\n",
      "17520/17520 [==============================] - 1s 58us/step - loss: 8.5790\n",
      "Epoch 21/60\n",
      "17520/17520 [==============================] - 1s 59us/step - loss: 8.5024\n",
      "Epoch 22/60\n",
      "17520/17520 [==============================] - 1s 59us/step - loss: 8.4080\n",
      "Epoch 23/60\n",
      "17520/17520 [==============================] - 1s 53us/step - loss: 8.4659\n",
      "Epoch 24/60\n",
      "17520/17520 [==============================] - 1s 65us/step - loss: 8.3897\n",
      "Epoch 25/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 8.2551\n",
      "Epoch 26/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 8.1256\n",
      "Epoch 27/60\n",
      "17520/17520 [==============================] - 1s 61us/step - loss: 8.1522\n",
      "Epoch 28/60\n",
      "17520/17520 [==============================] - 1s 56us/step - loss: 8.1155\n",
      "Epoch 29/60\n",
      "17520/17520 [==============================] - 1s 67us/step - loss: 8.0356\n",
      "Epoch 30/60\n",
      "17520/17520 [==============================] - 1s 66us/step - loss: 7.9044\n",
      "Epoch 31/60\n",
      "17520/17520 [==============================] - 1s 71us/step - loss: 7.8530\n",
      "Epoch 32/60\n",
      "17520/17520 [==============================] - 1s 68us/step - loss: 7.8132\n",
      "Epoch 33/60\n",
      "17520/17520 [==============================] - 1s 67us/step - loss: 7.8011\n",
      "Epoch 34/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 7.7799\n",
      "Epoch 35/60\n",
      "17520/17520 [==============================] - 1s 69us/step - loss: 7.7303\n",
      "Epoch 36/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 7.6237\n",
      "Epoch 37/60\n",
      "17520/17520 [==============================] - 1s 54us/step - loss: 7.5259\n",
      "Epoch 38/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 7.5628\n",
      "Epoch 39/60\n",
      "17520/17520 [==============================] - 1s 62us/step - loss: 7.4980\n",
      "Epoch 40/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 7.4179\n",
      "Epoch 41/60\n",
      "17520/17520 [==============================] - 1s 70us/step - loss: 7.4520\n",
      "Epoch 42/60\n",
      "17520/17520 [==============================] - 1s 66us/step - loss: 7.4076\n",
      "Epoch 43/60\n",
      "17520/17520 [==============================] - 1s 60us/step - loss: 7.2886\n",
      "Epoch 44/60\n",
      "17520/17520 [==============================] - 1s 59us/step - loss: 7.3071\n",
      "Epoch 45/60\n",
      "17520/17520 [==============================] - 1s 52us/step - loss: 7.2351\n",
      "Epoch 46/60\n",
      "17520/17520 [==============================] - 1s 52us/step - loss: 7.1537\n",
      "Epoch 47/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 7.1743\n",
      "Epoch 48/60\n",
      "17520/17520 [==============================] - 1s 61us/step - loss: 7.1758\n",
      "Epoch 49/60\n",
      "17520/17520 [==============================] - 1s 58us/step - loss: 7.1066\n",
      "Epoch 50/60\n",
      "17520/17520 [==============================] - 1s 50us/step - loss: 7.0478\n",
      "Epoch 51/60\n",
      "17520/17520 [==============================] - 1s 65us/step - loss: 7.2041\n",
      "Epoch 52/60\n",
      "17520/17520 [==============================] - 1s 57us/step - loss: 7.0612\n",
      "Epoch 53/60\n",
      "17520/17520 [==============================] - 1s 64us/step - loss: 6.9911\n",
      "Epoch 54/60\n",
      "17520/17520 [==============================] - 1s 69us/step - loss: 7.0042\n",
      "Epoch 55/60\n",
      "17520/17520 [==============================] - 1s 63us/step - loss: 6.9423\n",
      "Epoch 56/60\n",
      "17520/17520 [==============================] - 1s 61us/step - loss: 7.0516\n",
      "Epoch 57/60\n",
      "17520/17520 [==============================] - 1s 64us/step - loss: 6.9384\n",
      "Epoch 58/60\n",
      "17520/17520 [==============================] - 1s 74us/step - loss: 6.9122\n",
      "Epoch 59/60\n",
      "17520/17520 [==============================] - 1s 74us/step - loss: 6.8567\n",
      "Epoch 60/60\n",
      "17520/17520 [==============================] - 1s 70us/step - loss: 6.8639\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x20f4dc0b748>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x, y, epochs=60, callbacks=[keras.callbacks.EarlyStopping(patience=5)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[14.662258]]\n",
      "[[14.437608]]\n",
      "[[14.373296]]\n",
      "[[14.72408]]\n",
      "[[14.453717]]\n",
      "[[14.705894]]\n",
      "[[14.658186]]\n",
      "[[14.363283]]\n",
      "[[14.665506]]\n",
      "[[15.525203]]\n",
      "[[16.613228]]\n",
      "[[17.790745]]\n",
      "[[22.456598]]\n",
      "[[23.804352]]\n",
      "[[24.960255]]\n",
      "[[26.82202]]\n",
      "[[25.59989]]\n",
      "[[24.153236]]\n",
      "[[19.785172]]\n",
      "[[19.419992]]\n",
      "[[19.042486]]\n",
      "[[17.244644]]\n",
      "[[10.588946]]\n",
      "[[10.361619]]\n"
     ]
    }
   ],
   "source": [
    "test_data0 = np.array([10, 16, 0, 15.8, 90, 4])\n",
    "test_data1 = np.array([10, 16, 1, 15.5, 90, 4])\n",
    "test_data2 = np.array([10, 16, 2, 15.3, 90, 4])\n",
    "test_data3 = np.array([10, 16, 3, 15.5, 90, 4])\n",
    "test_data4 = np.array([10, 16, 4, 15.1, 90, 4])\n",
    "test_data5 = np.array([10, 16, 5, 15.2, 90, 4])\n",
    "test_data6 = np.array([10, 16, 6, 15.2, 90, 4])\n",
    "test_data7 = np.array([10, 16, 7, 15.0, 90, 4])\n",
    "test_data8 = np.array([10, 16, 8, 15.0, 90, 4])\n",
    "test_data9 = np.array([10, 16, 9, 15.3, 80, 4])\n",
    "test_data10 = np.array([10, 16, 10, 15.7, 80, 4])\n",
    "test_data11 = np.array([10, 16, 11, 16.5, 80, 4])\n",
    "test_data12 = np.array([10, 16, 12, 17.1, 55, 7])\n",
    "test_data13 = np.array([10, 16, 13, 17.6, 55, 7])\n",
    "test_data14 = np.array([10, 16, 14, 18.3, 55, 7])\n",
    "test_data15 = np.array([10, 16, 15, 19.0, 45, 7])\n",
    "test_data16 = np.array([10, 16, 16, 19.1, 45, 7])\n",
    "test_data17 = np.array([10, 16, 17, 19.1, 45, 7])\n",
    "test_data18 = np.array([10, 16, 18, 19.1, 80, 4])\n",
    "test_data19 = np.array([10, 16, 19, 19.0, 80, 4])\n",
    "test_data20 = np.array([10, 16, 20, 18.8, 80, 4])\n",
    "test_data21 = np.array([10, 16, 21, 18.2, 95, 4])\n",
    "test_data22 = np.array([10, 16, 22, 12, 95, 4])\n",
    "test_data23 = np.array([10, 16, 23, 12, 95, 4])\n",
    "print(model.predict(test_data0.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data1.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data2.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data3.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data4.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data5.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data6.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data7.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data8.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data9.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data10.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data11.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data12.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data13.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data14.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data15.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data16.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data17.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data18.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data19.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data20.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data21.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data22.reshape(1,6), batch_size=1))\n",
    "print(model.predict(test_data23.reshape(1,6), batch_size=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.385073]]\n"
     ]
    }
   ],
   "source": [
    "test_data = np.array([12, 31, 0, 4.3, 0.0, 80, 0.8])\n",
    "print(model.predict(test_data.reshape(1,7), batch_size=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
